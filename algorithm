Generator:
    list of processes data <- readInputFile()
    Algorithm type <- Ask user for Algorithm
    fork clock
    fork schedular
    stop schedular
    do foever
        see if time to generate a process
        if so pass it in the queue
        continue schedular
        stop myself

Schedular:
    should initiate its parameters given by the generator
    do forever
        check if new process are in the message queue
        if so 
            create PCB for them and add them in the ready queue
            fork the new processes
            stop all of them
        do scheduling algorithm in the ready queue
        continue generator
        stop myself

here is how all of this work

Generator:
- read the input
- ask for algorithm
- create shared memory for the clock
- create shared memory for process sending
- attach to the created shared memory segmetns
- fork the schedular
  schedular:
  - attach to the two segments created by the generator
- stop //until the schedular attach to the memory
  schedular:
  - continue the generator
  - stop 
- fork the clock tick tick tick
- do for ever
     get current time
     see if the next process arrival time is passed
     if so
        write them in the communication segment
     else
        set the size of the proccess to be read from the segment to zerp which will indicate to the schedular that no process arrives
     continue sched
     stop // the schedular will walk me up when requesting arriving process

schedular:
    do for ever
       check the shared segment for size > 0
       if so
          create size pcbs
          insert them in the queue
          fork them
          stop
          process:
            attach to clock
            continue sched
            stop //unitl being schedled
          insert pcbs into the heap
       continue the assigned HP one
       wait for the process to finsh
          process:
            run unitl it finish
            a sigchild should be send automatically
       should be continued and handle a sigchild
       continue the generator
       stop // the generator will continue me after proccessing new arrival processes

